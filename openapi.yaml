openapi: 3.0.0
info:
  description: |
    待辦事項 Side Project 的 API
  version: "1.0.0"
  title: To Do List API
  termsOfService: "data:text/html;base64,VGhpcyBBUEkgaXMgZm9yIHRlc3Rpbmcgb25seSwgdGhlIHRleHRzIG9mIHRoaXMgT3BlbkFQSSBzcGVjaWZpY2F0aW9uIGFuZC9vciBkb2N1bWVudGF0aW9uIGlzIG9wZW4gYnV0IHRoZSBBUEkgaXRzZWxmIGlzIG5vdC4gV2UgZG8gbm90IG9mZmVyIGd1YXJhbnRlZSBvZiBhbnkga2luZC4="
  contact:
    email: wei032499@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - description: Not Available Yet
    url: https://not-available-yet:9999/
tags:
  - name: auth
    description: Operations about authorization
  - name: accounts
    description: account of users
  - name: users
    description: profile of users
  - name: list
    description: Operations about list
  - name: message
    description: Notification and Live Feed
  - name: setting

paths:
  #auth
  /auth/login:
    get:
      tags:
        - auth
      summary: Logs user into the system with OAuth
      description: Redirect to OAuth page
      operationId: loginUserOAuth
      parameters:
        - name: provider
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Provider"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: the url of OAuth page
        "400":
          description: Bad Request
        "401":
          description: Logs error
    post:
      tags:
        - auth
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          description: Invalid account/password supplied
  /auth/toekn:
    get:
      tags:
        - auth
      summary: OAuth Token
      operationId: OAuthToken
      parameters:
        - name: authorizationCode
          in: query
          description: To ask for an access token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      url:
                        description: the url of redirection
                        type: string
                  - $ref: "#/components/schemas/Token"
        "400":
          description: Bad Request
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
        - bearerAuth: []

  #accounts
  /accounts/create:
    post:
      tags:
        - accounts
      summary: Create an account
      operationId: createAccount
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: Bad Request
        "409":
          description: The account already exists
  /accounts/me:
    get:
      tags:
        - accounts
      summary: Get my account info
      operationId: getMyAccount
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /accounts/me/actions/update_password:
    post:
      tags:
        - accounts
      summary: Update my password
      description: This can only be done by the logged in user.
      operationId: updateMyPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
        description: Updated user object
        required: true
      responses:
        "200":
          description: successful operation
        "403":
          description: password error
      security:
        - bearerAuth: []
  /accounts/me/actions/deactivate:
    post:
      tags:
        - accounts
      summary: Delete my account
      description: This can only be done by the logged in user.
      operationId: deleteMyAccount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
        required: true
      responses:
        "200":
          description: successful operation
        "403":
          description: password error
      security:
        - bearerAuth: []
  /accounts/me/actions/providers/{provider}:
    get:
      tags:
        - accounts
      summary: Connect to OAuth account
      description: Redirect to Google/Facebook OAuth page
      operationId: ConnectOAuth
      parameters:
        - name: provider
          in: path
          required: true
          description: google / facebook
          schema:
            $ref: "#/components/schemas/Provider"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request (provider not exist)
      security:
        - bearerAuth: []
    delete:
      tags:
        - accounts
      summary: Disconnect to OAuth account
      description: Redirect to Google/Facebook OAuth page
      operationId: DisconnectOAuth
      parameters:
        - name: provider
          in: path
          required: true
          description: google / facebook
          schema:
            $ref: "#/components/schemas/Provider"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request (provider not exist)
      security:
        - bearerAuth: []

  #users
  /users/me:
    get:
      tags:
        - users
      summary: Get my profile
      operationId: getMyProfile
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "400":
          description: Invalid account supplied
        "404":
          description: User not found
      security:
        - bearerAuth: []
    put:
      tags:
        - users
      summary: Updated my profile
      description: This can only be done by the logged in user.
      operationId: updateMyProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      security:
        - bearerAuth: []
  /users:
    get:
      tags:
        - users
      summary: Search and get user
      description: Search user by email or name
      operationId: searchUser
      parameters:
        - name: query
          in: query
          description: email / name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /users/{uid}:
    get:
      tags:
        - users
      summary: Get user profile
      operationId: getUserProfile
      parameters:
        - name: uid
          in: path
          description: Use 0 for testing.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "400":
          description: Invalid account supplied
        "404":
          description: User not found
      security:
        - bearerAuth: []

  #list
  /list:
    get:
      tags:
        - list
      summary: Get lists
      operationId: getLists
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/List"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    post:
      tags:
        - list
      summary: Create a list
      operationId: createList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                listId:
                  type: integer
                  format: int64
                  description: the parent list id (if needed)
                title:
                  type: string
                themeId:
                  type: integer
                  format: int64
                participants:
                  type: array
                  items:
                    type: string
                    description: uid
              required:
                - title
                - themeId
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
  /list/arrange:
    put:
      tags:
        - list
      summary: Arrange the list
      operationId: arrangeList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
                description: The order of listId
              example: [0, 2, 1]
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
  /list/{listId}:
    get:
      tags:
        - list
      summary: Get specific list
      operationId: getList
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"

        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    put:
      tags:
        - list
      summary: Update specific list
      operationId: updateList
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                themeId:
                  type: integer
                  format: int64
                participants:
                  type: array
                  items:
                    type: string
                    description: uid
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    delete:
      tags:
        - list
      summary: Delete specific list
      operationId: deleteList
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /list/{listId}/tasks:
    get:
      tags:
        - list
      summary: Get the content in specific list
      operationId: getListContent
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - type: object
                      title: list
                      allOf:
                        - type: object
                          properties:
                            type:
                              type: string
                              default: list
                        - $ref: "#/components/schemas/List"
                    - type: object
                      title: task
                      allOf:
                        - type: object
                          properties:
                            type:
                              type: string
                              default: task
                            taskId:
                              type: integer
                              format: int64
                        - $ref: "#/components/schemas/Task"
                  discriminator:
                    propertyName: type
    post:
      tags:
        - list
      summary: Create a task
      operationId: createTask
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskId:
                    type: integer
                    format: int64
        "400":
          description: Bad Request
      security:
        - bearerAuth: []

  /list/{listId}/tasks/{taskId}:
    get:
      tags:
        - list
      summary: Get specific task
      operationId: getTask
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: taskId
          required: true
          in: path
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    put:
      tags:
        - list
      summary: Update specific task
      operationId: updateTask
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    delete:
      tags:
        - list
      summary: Delete specific task
      operationId: deleteTask
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /message:
    get:
      tags:
        - message
      summary: Get messages
      description: Get all tasks if the query value is null
      operationId: getAllMessage
      parameters:
        - name: other
          in: query
          description: "true: also show other people in live feed"
          schema:
            type: boolean
            default: false
        - name: before
          in: query
          description: postId
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: The limit number of return posts
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 10
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  unseen:
                    type: integer
                  message:
                    type: array
                    items:
                      $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
  /message/seen:
    get:
      tags:
        - message
      summary: Seen all message
      operationId: seenAllMessage
      responses:
        "200":
          description: successful operation
      security:
        - bearerAuth: []
  /message/seen/{messageId}:
    get:
      tags:
        - message
      summary: Seen specific message
      operationId: seenMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
      security:
        - bearerAuth: []
  /message/{messageId}:
    get:
      tags:
        - message
      summary: Get specific message
      operationId: getMessage
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - bearerAuth: []
  /setting:
    get:
      tags:
        - setting
      summary: Set darkmode, language
      operationId: setting
      parameters:
        - name: darkmode
          in: query
          schema:
            type: boolean
        - name: language
          in: query
          schema:
            type: string
            enum:
              - tw
              - en
      responses:
        "200":
          description: successful operation
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
components:
  schemas:
    Account:
      $ref: "./schemas/Account.yaml"
    Attachment:
      $ref: "./schemas/Attachment.yaml"
    Invitation:
      $ref: "./schemas/Invitation.yaml"
    List:
      $ref: "./schemas/List.yaml"
    Message:
      $ref: "./schemas/Message.yaml"
    Post:
      $ref: "./schemas/Post.yaml"
    PostIds:
      $ref: "./schemas/PostIds.yaml"
    Profile:
      $ref: "./schemas/Profile.yaml"
    Provider:
      $ref: "./schemas/Provider.yaml"
    Remind:
      $ref: "./schemas/Remind.yaml"
    Repeat:
      $ref: "./schemas/Repeat.yaml"
    Task:
      $ref: "./schemas/Task.yaml"
    Token:
      $ref: "./schemas/Token.yaml"
  requestBodies:
    Login:
      $ref: "./request_bodies/Login.yaml"
    UserArray:
      $ref: "./request_bodies/UserArray.yaml"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  #   account_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
  #         scopes:
  #           "write:account": modify your account
  #           "read:account": read your account
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header

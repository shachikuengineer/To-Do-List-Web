openapi: 3.0.0
info:
  description: |
    This is a sample Petstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0"
  title: To Do List Web
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: wei032499@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/wei_032499/user/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/wei_032499/account/1.0.0
  - url: "https://petstore.swagger.io/v2"
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: "http://swagger.io"
  - name: store
    description: Access to Petstore orders

paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system with OAuth
      description: Redirect to OAuth page
      operationId: loginUserOAuth
      parameters:
        - name: service
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: Bad Request
        "401":
          description: Logs error
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - account
                - password
              properties:
                account:
                  type: string
                  example: wei032499@gmail.com
                password:
                  type: string
                  example: "********"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          description: Invalid account/password supplied
  /user/login/OAuthCallback:
    get:
      tags:
        - user
      summary: OAuth callback
      operationId: OAuthCallback
      parameters:
        - name: service
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Service"
        - name: authorizationCode
          in: query
          description: To ask for an access token
          required: true
          schema:
            type: string
        - name: redirect
          in: query
          description: Redirect URL
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request (service not exist)
  /user/connect:
    get:
      tags:
        - user
      summary: Connect to OAuth account
      description: Redirect to Google/Facebook OAuth page
      operationId: connectOAuth
      parameters:
        - name: service
          in: query
          required: true
          description: google / facebook
          schema:
            $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request (service not exist)
      security:
        - bearerAuth: []
  /user/disconnect:
    get:
      tags:
        - user
      summary: Disconnect with OAuth account
      operationId: disconnectOAuth
      parameters:
        - name: service
          in: query
          required: true
          description: google / facebook
          schema:
            $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request (service not exist)
      security:
        - bearerAuth: []
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
        - bearerAuth: []
  "/user/{account}":
    get:
      tags:
        - user
      summary: Get user by user account
      operationId: getUserByAccount
      parameters:
        - name: account
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid account supplied
        "404":
          description: User not found
      security:
        - bearerAuth: []
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: account
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      security:
        - bearerAuth: []
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: account
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid account supplied
        "404":
          description: User not found
      security:
        - bearerAuth: []
  # "/pet/{petId}":
  #   get:
  #     tags:
  #       - login
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Login"
  #           application/xml:
  #             schema:
  #               $ref: "#/components/schemas/Login"
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Pet not found
  #     security:
  #       - api_key: []
  #   post:
  #     tags:
  #       - login
  #     summary: Updates a pet in the store with form data
  #     operationId: updatePetWithForm
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet that needs to be updated
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "405":
  #         description: Invalid input
  #     security:
  #       - account_auth:
  #           - "write:pets"
  #           - "read:pets"
  #     requestBody:
  #       content:
  #         application/x-www-form-urlencoded:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 description: Updated name of the pet
  #                 type: string
  #               status:
  #                 description: Updated status of the pet
  #                 type: string
  #   delete:
  #     tags:
  #       - login
  #     summary: Deletes a pet
  #     operationId: deletePet
  #     parameters:
  #       - name: api_key
  #         in: header
  #         required: false
  #         schema:
  #           type: string
  #       - name: petId
  #         in: path
  #         description: Pet id to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Pet not found
  #     security:
  #       - account_auth:
  #           - "write:pets"
  #           - "read:pets"
  # "/pet/{petId}/uploadImage":
  #   post:
  #     tags:
  #       - login
  #     summary: uploads an image
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ApiResponse"
  #     security:
  #       - account_auth:
  #           - "write:pets"
  #           - "read:pets"
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      operationId: placeOrder
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid Order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        description: order placed for purchasing the pet
        required: true
  "/store/order/{orderId}":
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
        values will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 10
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
            application/xml:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
components:
  schemas:
    Token:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
          format: int64
        token_type:
          type: string
          default: "Bearer"
    User:
      type: object
      properties:
        account:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        connected:
          type: array
          items:
            $ref: "#/components/schemas/Service"
            description: Service
        userStatus:
          type: integer
          format: int32
          description: User Status
    Service:
      description: OAuth service
      type: string
      enum:
        - google
        - facebook
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    # Login:
    #   content:
    #     application/json:
    #       schema:
    #         $ref: "#/components/schemas/Login"
    #     application/xml:
    #       schema:
    #         $ref: "#/components/schemas/Login"
    #   description: The information for login
    #   required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    account_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
          scopes:
            "write:account": modify your account
            "read:account": read your account
    api_key:
      type: apiKey
      name: api_key
      in: header
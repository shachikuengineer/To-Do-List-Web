openapi: 3.0.0
info:
  description: |
    This is a sample Petstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  version: "1.0.0"
  title: To Do List Web
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: wei032499@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/wei_032499/ToDoList/1.0.0
  # - url: "https://petstore.swagger.io/v2"
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: "http://swagger.io"
  - name: live feed
    description: Operations about live feed
  - name: list
    description: Operations about list
  - name: task
    description: Operations about task
  - name: notice
    description: Notification message
  - name: setting

paths:
  /user:
    get:
      tags:
        - user
      summary: Get user account info
      operationId: getUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
        "409":
          description: The account already exists
    put:
      tags:
        - user
      summary: Update user password
      description: This can only be done by the logged in user.
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
        description: Updated user object
        required: true
      responses:
        "200":
          description: successful operation
        "403":
          description: password error
      security:
        - bearerAuth: []
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        "200":
          description: successful operation
        "403":
          description: password error
      security:
        - bearerAuth: []

  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system with OAuth
      description: Redirect to OAuth page
      operationId: loginUserOAuth
      parameters:
        - name: service
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "400":
          description: Bad Request
        "401":
          description: Logs error
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        $ref: "#/components/requestBodies/Login"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          description: Invalid account/password supplied
  /user/login/OAuthCallback:
    get:
      tags:
        - user
      summary: OAuth callback
      operationId: OAuthCallback
      parameters:
        - name: authorizationCode
          in: query
          description: To ask for an access token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
  /user/connect:
    get:
      tags:
        - user
      summary: Connect to OAuth account
      description: Redirect to Google/Facebook OAuth page
      operationId: connectOAuth
      parameters:
        - name: service
          in: query
          required: true
          description: google / facebook
          schema:
            $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request (service not exist)
      security:
        - bearerAuth: []
  /user/disconnect:
    get:
      tags:
        - user
      summary: Disconnect with OAuth account
      operationId: disconnectOAuth
      parameters:
        - name: service
          in: query
          required: true
          description: google / facebook
          schema:
            $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request (service not exist)
      security:
        - bearerAuth: []
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
        - bearerAuth: []
  /user/search:
    get:
      tags:
        - user
      summary: Search and get user profile
      description: Search user by email or name
      operationId: searchUser
      parameters:
        - name: query
          in: query
          description: email / name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /user/{uid}/profile:
    get:
      tags:
        - user
      summary: Get user profile
      operationId: getUserProfile
      parameters:
        - name: uid
          in: path
          description: Use 0 for testing.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "400":
          description: Invalid account supplied
        "404":
          description: User not found
      security:
        - bearerAuth: []
    put:
      tags:
        - user
      summary: Updated user profile
      description: This can only be done by the logged in user.
      operationId: updateUserProfile
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      security:
        - bearerAuth: []

  /livefeed/{uid}:
    get:
      tags:
        - live feed
      summary: Get live feed list
      operationId: getLiveFeed
      parameters:
        - name: uid
          in: path
          description: Use 0 for testing.
          required: true
          schema:
            type: integer
            format: int64
        - name: other
          in: query
          description: "true: also show other people in live feed"
          schema:
            type: boolean
            default: true
        - name: before
          in: query
          description: The number of latest posts skipped
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 10
        - name: limit
          in: query
          description: The limit number of return posts
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 10
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
  /livefeed/post/{postId}:
    get:
      tags:
        - live feed
      summary: Get the post
      operationId: getPost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
    delete:
      tags:
        - live feed
      summary: Delete/Hide the post in live feed list
      description: The poster delete the post; the other poeple hide the post from their live feed list.
      operationId: deletePost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      security:
        - bearerAuth: []

  /list:
    get:
      tags:
        - list
      summary: Get lists
      operationId: getLists
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/List"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    post:
      tags:
        - list
      summary: Create a list
      operationId: createList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                themeId:
                  type: integer
                  format: int64
                share:
                  type: array
                  items:
                    type: string
                    description: uid
              required:
                - title
                - themeId
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/List"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
  /list/arrange:
    put:
      tags:
        - list
      summary: Arrange the list
      operationId: arrangeList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                description: The order of listId
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
  /list/{listId}:
    get:
      tags:
        - list
      summary: Get specific list
      operationId: getList
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/List"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    put:
      tags:
        - list
      summary: Update specific list
      operationId: updateList
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                themeId:
                  type: integer
                  format: int64
                share:
                  type: array
                  items:
                    type: string
                    description: uid
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    delete:
      tags:
        - list
      summary: Delete specific list
      operationId: deleteList
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /task:
    get:
      tags:
        - task
      summary: Get tasks in specific list
      description: Get all tasks if the query value is null
      operationId: getTasks
      parameters:
        - name: listId
          required: true
          in: query
          schema:
            type: string
            default: null
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    post:
      tags:
        - task
      summary: Create a task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                listId:
                  type: integer
                  format: int64
                task:
                  $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  taskId:
                    type: integer
                    format: int64

        "400":
          description: Bad Request
      security:
        - bearerAuth: []
  /task/{taskId}:
    get:
      tags:
        - task
      summary: Get specific task
      operationId: getTask
      parameters:
        - name: taskId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    put:
      tags:
        - task
      summary: Update specific task
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
    delete:
      tags:
        - task
      summary: Delete specific task
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad Request
        "403":
          description: Forbidden
      security:
        - bearerAuth: []
  /notice:
    get:
      tags:
        - notice
      summary: Get notification message
      description: Get all tasks if the query value is null
      operationId: getAllNotice
      parameters:
        - name: before
          in: query
          description: The number of latest posts skipped
          schema:
            type: integer
            default: 0
            minimum: 0
            maximum: 10
        - name: limit
          in: query
          description: The limit number of return posts
          schema:
            type: integer
            default: 10
            minimum: 0
            maximum: 10
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  unseen:
                    type: integer
                  message:
                    type: array
                    items:
                      $ref: "#/components/schemas/Notification"
        "400":
          description: Bad Request
      security:
        - bearerAuth: []
  /notice/seen:
    get:
      tags:
        - notice
      summary: Seen all message
      operationId: seenAllNotice
      responses:
        "200":
          description: successful operation
      security:
        - bearerAuth: []
  /notice/seen/{noticeId}:
    get:
      tags:
        - notice
      summary: Seen specific message
      operationId: seenNotice
      parameters:
        - name: noticeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
      security:
        - bearerAuth: []
  /notice/invite/{noticeId}:
    get:
      tags:
        - notice
      summary: Response to the invitation
      operationId: responseInvite
      parameters:
        - name: noticeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: accepted
          in: query
          required: true
          schema:
            type: boolean
      responses:
        "200":
          description: successful operation
      security:
        - bearerAuth: []
  /setting/datkmode:
    get:
      tags:
        - setting
      summary: Switch dark mode
      operationId: switchDarkMode
      parameters:
        - name: darkmode
          in: query
          required: true
          schema:
            type: string
            enum:
              - open
              - close
      responses:
        "200":
          description: successful operation
      security:
        - bearerAuth: []
  /setting/language:
    get:
      tags:
        - setting
      summary: Change language
      operationId: changeLanguage
      parameters:
        - name: language
          in: query
          required: true
          schema:
            type: string
            enum:
              - tw
              - en
      responses:
        "200":
          description: successful operation
      security:
        - bearerAuth: []

  # "/pet/{petId}":
  #   get:
  #     tags:
  #       - login
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Login"
  #           application/xml:
  #             schema:
  #               $ref: "#/components/schemas/Login"
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Pet not found
  #     security:
  #       - api_key: []
  #   post:
  #     tags:
  #       - login
  #     summary: Updates a pet in the store with form data
  #     operationId: updatePetWithForm
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet that needs to be updated
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "405":
  #         description: Invalid input
  #     security:
  #       - account_auth:
  #           - "write:pets"
  #           - "read:pets"
  #     requestBody:
  #       content:
  #         application/x-www-form-urlencoded:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 description: Updated name of the pet
  #                 type: string
  #               status:
  #                 description: Updated status of the pet
  #                 type: string
  #   delete:
  #     tags:
  #       - login
  #     summary: Deletes a pet
  #     operationId: deletePet
  #     parameters:
  #       - name: api_key
  #         in: header
  #         required: false
  #         schema:
  #           type: string
  #       - name: petId
  #         in: path
  #         description: Pet id to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Pet not found
  #     security:
  #       - account_auth:
  #           - "write:pets"
  #           - "read:pets"
  # "/pet/{petId}/uploadImage":
  #   post:
  #     tags:
  #       - login
  #     summary: uploads an image
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/ApiResponse"
  #     security:
  #       - account_auth:
  #           - "write:pets"
  #           - "read:pets"
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary

externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
components:
  schemas:
    Token:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
          format: int64
        token_type:
          type: string
          default: "Bearer"
    User:
      type: object
      properties:
        uid:
          type: integer
          format: int64
        email:
          type: string
          format: email
        connected:
          type: array
          items:
            $ref: "#/components/schemas/Service"
        userStatus:
          type: integer
          format: int32
          description: User Status
    Profile:
      type: object
      properties:
        uid:
          type: integer
          format: int64
        picture:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    Service:
      description: OAuth service
      type: string
      enum:
        - google
        - facebook
    Task:
      type: object
      properties:
        taskId:
          type: integer
          format: int64
        title:
          type: string
        remind:
          type: array
          items:
            type: object
            properties:
              num:
                type: integer
                format: int64
              unit:
                type: string
                enum:
                  - minute
                  - hour
                  - day
                  - week
                  - month
                  - year
              time:
                type: string
                format: time
                description: for day
              notification:
                type: array
                items:
                  type: string
                  enum:
                    - email
                    - web
        due:
          type: string
          format: date-time
        repeat:
          type: object
          properties:
            num:
              type: integer
              format: int64
            unit:
              type: string
              enum:
                - day
                - week
                - month
                - year
            time:
              type: string
              format: time
              description: for day
        files:
          type: array
          items:
            $ref: "#/components/schemas/File"
        urls:
          type: array
          items:
            type: string
        share:
          type: array
          items:
            $ref: "#/components/schemas/Profile"
        note:
          type: string
        review:
          type: string
        isList:
          type: boolean
          default: false
        list:
          $ref: "#/components/schemas/List"

    File:
      type: object
      properties:
        name:
          type: string
        link:
          type: string
    Post:
      type: object
      properties:
        postId:
          type: integer
          format: int64
        poster:
          $ref: "#/components/schemas/Profile"
        date:
          type: string
          format: date-time
        task:
          $ref: "#/components/schemas/Task"
        review:
          type: string
    List:
      type: object
      properties:
        listId:
          type: integer
          format: int64
        title:
          type: string
        theme:
          $ref: "#/components/schemas/Theme"
        share:
          type: array
          items:
            $ref: "#/components/schemas/Profile"
    Theme:
      type: object
      properties:
        themeId:
          type: integer
          format: int64
        icon:
          type: string
        link:
          type: string
    Invitation:
      type: object
      properties:
        inviter:
          $ref: "#/components/schemas/Profile"
        list:
          $ref: "#/components/schemas/List"
        accepted:
          type: boolean
    Notification:
      type: object
      properties:
        noticeId:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - invite
            - complete
            - post
        invite:
          $ref: "#/components/schemas/Invitation"
        complete:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/Profile"
            list:
              $ref: "#/components/schemas/List"
        post:
          $ref: "#/components/schemas/Post"
        date:
          type: string
          format: date-time
        seen:
          type: boolean
  requestBodies:
    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
            required:
              - email
              - password
      description: The information for login
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Profile"
      description: List of user object
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    account_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
          scopes:
            "write:account": modify your account
            "read:account": read your account
    api_key:
      type: apiKey
      name: api_key
      in: header
